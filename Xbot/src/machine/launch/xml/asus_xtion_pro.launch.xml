<launch>
  <arg name="camera_calibration" default="$(find skeleton_detection)/config/asus_live_pro_calibrition.yaml" />
  <arg name="rgb_frame_id"   default="$(arg camera)_rgb_optical_frame" />
  <arg name="depth_frame_id" default="$(arg camera)_rgb_optical_frame" />
  <node pkg="skeleton_detection" type="xtion_tracker" name="skeleton_detection" respawn="true" output="screen">
          <param name="camera" type="string" value="/$(arg camera)"/>
          <param name="rgb_frame" type="string" value="/$(arg rgb_frame_id)"/>
          <param name="depth_frame" type="string" value="/$(arg depth_frame_id)"/>
          <param name="camera_calibration" type="string" value="$(arg camera_calibration)"/>
          <remap from="/clicked_point" to="/skelecton/clicked_point"/>
  </node>

  <arg name="use_skeleton_topic" default="/skelecton/clicked_point" />
  <arg name="use_robotposition_topic" default="/robot_position_in_map" />
  <arg name="publish_frequency" default="10" />
  <arg name="pub_topic" default="/clicked_point" />

  <node pkg="nav_staff" type="skeleton_goal.py" name="skeleton_goal"  respawn="true" output="screen">
          <param name="use_skeleton_topic" value="$(arg use_skeleton_topic)" />
          <param name="publish_frequency" value="$(arg publish_frequency)" />
          <param name="pub_topic" value="$(arg pub_topic)" />
          <param name="use_robotposition_topic" value="$(arg use_robotposition_topic)" />
  </node>

  <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->
  <arg name="camera"      default="camera"/>
  <arg name="publish_tf"  default="true"/>
  <!-- Factory-calibrated depth registration -->
  <arg name="depth_registration"              default="true"/>
  <arg     if="$(arg depth_registration)" name="depth" value="depth_registered" />
  <arg unless="$(arg depth_registration)" name="depth" value="depth" />

  <!-- Processing Modules -->
  <arg name="rgb_processing"                  default="true"/>
  <arg name="ir_processing"                   default="true"/>
  <arg name="depth_processing"                default="true"/>
  <arg name="depth_registered_processing"     default="true"/>
  <arg name="disparity_processing"            default="true"/>
  <arg name="disparity_registered_processing" default="true"/>
  <arg name="scan_processing"                 default="true"/>
  <!--<arg name="camera_calibration"              default="~/.ros/camera_info/rgb_PS1080_PrimeSense.yaml" />-->
  <!--<arg name="camera_calibration" default="/home/howe/turtlebot_demo/src/machine/param/camera_info/rgb_PS1080_PrimeSense.yaml" />-->

  <!-- Worker threads for the nodelet manager -->
  <arg name="num_worker_threads" default="4" />

  <include file="$(find openni2_launch)/launch/openni2.launch">
          <arg name="camera"                          value="$(arg camera)"/>
          <arg name="publish_tf"                      value="$(arg publish_tf)"/>
          <arg name="depth_registration"              value="$(arg depth_registration)"/>
          <arg name="num_worker_threads"              value="$(arg num_worker_threads)" />
          <arg name="load_driver"                     value="False" />
          <arg name="rgb_camera_info_url"             value="$(arg camera_calibration)"/>
          <arg name="debayer_processing"              value="True"/>
          <arg name="sw_registered_processing"        value="True"/>

          <!-- Processing Modules -->
          <arg name="rgb_processing"                  value="$(arg rgb_processing)"/>
          <arg name="ir_processing"                   value="$(arg ir_processing)"/>
          <arg name="depth_processing"                value="$(arg depth_processing)"/>
          <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)"/>
          <arg name="disparity_processing"            value="$(arg disparity_processing)"/>
          <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)"/>
  </include>
  
</launch>
