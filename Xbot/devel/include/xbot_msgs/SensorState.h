// Generated by gencpp from file xbot_msgs/SensorState.msg
// DO NOT EDIT!


#ifndef XBOT_MSGS_MESSAGE_SENSORSTATE_H
#define XBOT_MSGS_MESSAGE_SENSORSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace xbot_msgs
{
template <class ContainerAllocator>
struct SensorState_
{
  typedef SensorState_<ContainerAllocator> Type;

  SensorState_()
    : header()
    , time_stamp(0)
    , left_encoder(0)
    , right_encoder(0)
    , charger(0)
    , battery(0)
    , current()
    , over_current(0)  {
    }
  SensorState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time_stamp(0)
    , left_encoder(0)
    , right_encoder(0)
    , charger(0)
    , battery(0)
    , current(_alloc)
    , over_current(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef uint16_t _left_encoder_type;
  _left_encoder_type left_encoder;

   typedef uint16_t _right_encoder_type;
  _right_encoder_type right_encoder;

   typedef uint8_t _charger_type;
  _charger_type charger;

   typedef uint8_t _battery_type;
  _battery_type battery;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _current_type;
  _current_type current;

   typedef uint8_t _over_current_type;
  _over_current_type over_current;


    enum { OVER_CURRENT_LEFT_WHEEL = 1u };
     enum { OVER_CURRENT_RIGHT_WHEEL = 2u };
     enum { OVER_CURRENT_BOTH_WHEELS = 3u };
 

  typedef boost::shared_ptr< ::xbot_msgs::SensorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xbot_msgs::SensorState_<ContainerAllocator> const> ConstPtr;

}; // struct SensorState_

typedef ::xbot_msgs::SensorState_<std::allocator<void> > SensorState;

typedef boost::shared_ptr< ::xbot_msgs::SensorState > SensorStatePtr;
typedef boost::shared_ptr< ::xbot_msgs::SensorState const> SensorStateConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xbot_msgs::SensorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xbot_msgs::SensorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace xbot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'xbot_msgs': ['/home/howe/Xbot/src/xbot/xbot_msgs/msg', '/home/howe/Xbot/devel/share/xbot_msgs/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::xbot_msgs::SensorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xbot_msgs::SensorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xbot_msgs::SensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xbot_msgs::SensorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbot_msgs::SensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xbot_msgs::SensorState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xbot_msgs::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0843057cfa33b47017bd3f6f41a35ec";
  }

  static const char* value(const ::xbot_msgs::SensorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0843057cfa33b47ULL;
  static const uint64_t static_value2 = 0x017bd3f6f41a35ecULL;
};

template<class ContainerAllocator>
struct DataType< ::xbot_msgs::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xbot_msgs/SensorState";
  }

  static const char* value(const ::xbot_msgs::SensorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xbot_msgs::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Xbot Sensor Data Messages\n\
#\n\
# For more direct simple interactions (buttons, leds, gyro, motor velocity\n\
# etc) use the other topics. This provides detailed information about the\n\
# entire state package that is transmitted at 50Hz from the robot.\n\
#\n\
\n\
\n\
\n\
\n\
\n\
# Over current states\n\
uint8 OVER_CURRENT_LEFT_WHEEL  = 1\n\
uint8 OVER_CURRENT_RIGHT_WHEEL = 2\n\
uint8 OVER_CURRENT_BOTH_WHEELS = 3\n\
\n\
\n\
\n\
###### MESSAGE ######\n\
\n\
Header header\n\
\n\
###################\n\
# Core Packet\n\
###################\n\
uint32 time_stamp      # milliseconds starting when turning on Xbot (max. 65536, then starts from 0 again)\n\
uint16 left_encoder    # accumulated ticks left wheel starting with turning on Xbot (max. 65535)\n\
uint16 right_encoder   # accumulated ticks right wheel starting with turning on Xbot (max. 65535)\n\
uint8  charger         # see charger states\n\
uint8  battery         # battery voltage in 0.1V (ex. 16.1V -> 161)\n\
\n\
\n\
###################\n\
# Current Packet\n\
###################\n\
uint8[] current        # motor current for the left and right motor in 10mA (ex. 12 -> 120mA)\n\
uint8   over_current   # see over current states\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::xbot_msgs::SensorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xbot_msgs::SensorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time_stamp);
      stream.next(m.left_encoder);
      stream.next(m.right_encoder);
      stream.next(m.charger);
      stream.next(m.battery);
      stream.next(m.current);
      stream.next(m.over_current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SensorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xbot_msgs::SensorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xbot_msgs::SensorState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time_stamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "left_encoder: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.left_encoder);
    s << indent << "right_encoder: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.right_encoder);
    s << indent << "charger: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charger);
    s << indent << "battery: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery);
    s << indent << "current[]" << std::endl;
    for (size_t i = 0; i < v.current.size(); ++i)
    {
      s << indent << "  current[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.current[i]);
    }
    s << indent << "over_current: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.over_current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XBOT_MSGS_MESSAGE_SENSORSTATE_H
